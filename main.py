from cmd import Cmd
from src.DeviceManager import DeviceManager
import threading
import json


class MyPrompt(Cmd):
    def __init__(self):
        Cmd.__init__(self)
        self.DeviceManager = DeviceManager()

    def do_provision(self, args):
        """Adds a new device to the device manager. Does not take args"""
        self.DeviceManager.add_device()

    def do_delete(self, args):
        """Deletes device from the manager, must supply short name of the device"""
        if len(args.split()) == 2:
            self.DeviceManager.remove_device(args)
        else:
            print("Incorrect number of args sent!")

    def do_list(self, args):
        """Lists all Devices currently managed"""
        print(self.DeviceManager)

    def do_run(self, args):
        """Stars the devices run thread, must supply short name of the device"""
        if len(args.split()) == 2:
            self.DeviceManager.run_device(args)
        else:
            print("Incorrect number of args sent!")

    def do_stop(self, args):
        """Stops the devices run thread, must supply short name of the device"""
        if len(args.split()) == 2:
            self.DeviceManager.stop_device(args)
        else:
            print("Incorrect number of args sent!")

    def do_read(self, args):
        """Reads the last payload generated by device, must supply short name of the device"""
        if len(args.split()) == 2:
            payl = self.DeviceManager.find_payload(args)
            print(
                json.dumps(
                    payl,
                    indent=4,
                    default=str,
                    sort_keys=True,
                )
            )
        else:
            print("Incorrect number of args sent!")

    def do_stats(self, args):
        """Displays some statistics about the device running, must supply short name of the device"""
        if len(args.split()) == 2:
            self.DeviceManager.find_stats(args)
        else:
            print("Incorrect number of args sent!")

    def do_quit(self, args):
        """Quits the program."""
        print("Quitting.")
        raise SystemExit


if __name__ == "__main__":
    prompt = MyPrompt()
    prompt.prompt = "> "
    prompt.cmdloop("Welcome to IoT Device Simulator. Type 'help' to see available commands")